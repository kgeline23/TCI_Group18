package model;

import java.awt.*;
import java.util.Objects;

/**
 * student is an immutable object. it's used for passing around information on students.
 * it is uniquely identified by the studentnumber and name combination.
 */
public class Student {
    private String name;
    private long studentnumber;
    private Image photo;

    //TODO: the appropiate methods

    /**
     *  * student is an immutable object. it's used for passing around information on students.
     *  * it is uniquely identified by the studentnumber and name combination.
     * @param name
     * @param studentnumber
     * @throws IllegalArgumentException if name is null or studentnumber is smaller than zero
     * @should create student with valid parameters
     * @should show that logically similar courses are equal
     * @should show that logically not-similar courses are not equal
     * @should throw illegalargument exception if any of the input parameters is null
     */
    public Student(String name, long studentnumber) throws IllegalArgumentException{
        if(name==null){
            throw new IllegalArgumentException("Name must not be null.");
        }
        if(studentnumber<0){
            throw new IllegalArgumentException("Student number must be a positive integer");
        }
        this.name = name;
        this.studentnumber = studentnumber;
    }

    /******************************************************
     *
     *   GETTERS/SETTERS CODE IS GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/
    public String getName() {
        return name;
    }

    public long getStudentnumber() {
        return studentnumber;
    }

    public void setPhoto(Image photo) {
        this.photo = photo;
    }

    public Image getPhoto() {
        return photo;
    }

    /******************************************************
     *
     *   OTHER CODE GENERATED BY INTELLIJ,
     *   BUT BASED ON INPUT OF A PROGRAMMER.
     *   THE BEHAVIOUR OF THIS CODE HAS TO BE TESTED.
     *   (but not present to keep demo code short)
     *
     ********************************************************/

    //not sure about using studentnumber and name
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Student student = (Student) o;
        return studentnumber == student.studentnumber && Objects.equals(name, student.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, studentnumber);
    }
}
